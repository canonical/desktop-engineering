name: Build debian package
description: Builds a debian package and uploads the artifact

inputs:
  source-dir:
    required: false
    description: Directory where the source is located
  docker-image:
    required: false
    default: ubuntu:rolling
    description: The docker image used to build the package
  token:
    required: false
    description: If provided, used for git authentication in the source build
  extra-source-build-deps:
    description: A list of extra build dependencies required during source build.
    required: false
    # FIXME: this should default to '', but we don't want to break job depending on us for now
    default: 'ca-certificates git'


# The process:
# 1. We build the source package in a docker container. If ca-certificates are
#    installed via extra-source-build-deps we can have a useful internet connection.
# 2. We the extract the source package.
# 3. We build the .deb from the source package, in a container without ca-certificates (unless it
#    is added as a build dependency), hence without a useful internet connection.
#
# To help with debugging, here are the processes and the directories they takes place in:
#
#  ${{ github.workspace }}
#     ├── a/b/c/${{ inputs.source-dir }}
#     │                 |
#     │           Build source pkg
#     │                 ↓
#     ├── ${{ env.SOURCE_OUTPUT_DIR }}
#     │                 |
#     │          Extract source pkg
#     │                 ↓
#     ├── ${{ env.BUILD_INPUT_DIR }}
#     │                 |
#     │          Build debian pkg
#     │                 ↓
#     └── ${{ env.BUILD_OUTPUT_DIR }}

runs:
  using: "composite"
  steps:
    - name: Set up source package build
      shell: bash
      run: |
        set -eu

        echo "::group::Install devscripts"
        DEBIAN_FRONTEND=noninteractive sudo apt update
        DEBIAN_FRONTEND=noninteractive sudo apt install -y devscripts
        echo "::endgroup::"

        echo "::group::Create local version with commit and docker container"
        cd '${{ inputs.source-dir }}'

        # Sanitize the docker name so that it stick to debian policy
        # https://www.debian.org/doc/debian-policy/ch-controlfields.html#version
        sanitized_docker=$( echo "${{ inputs.docker-image }}" | sed -r 's/[^a-zA-Z0-9.+~]+/+/g' )

        # Short commit to avoid "package-has-long-file-name"
        commit=$(echo ${{ github.sha }} | cut -c1-8)

        export DEBFULLNAME="GitHub actions runner"
        export DEBEMAIL="noreply@github.com"
        debchange --local "~${sanitized_docker}+${commit}" "Github build. Run id: ${{ github.run_id }}. Run number: ${{ github.run_number }}."
        
        echo "::endgroup::"

        echo "::group::Parsing name and version"
        echo PKG_NAME="$( dpkg-parsechangelog --show-field source )" >> $GITHUB_ENV
        echo PKG_VERSION="$( dpkg-parsechangelog --show-field version )" >> $GITHUB_ENV
        cd -
        echo "::endgroup::"

        echo "::group::Prepare source build"
        echo SOURCE_OUTPUT_DIR="$( mktemp --directory --tmpdir="${PWD}" )" >> $GITHUB_ENV
        echo "::endgroup::"

    - name: Build source package
      uses: kohlerdominik/docker-run-action@v1.2.0
      with:
        image: ${{ inputs.docker-image }}
        environment: |
          DEBIAN_FRONTEND=noninteractive
        volumes: ${{ github.workspace }}:${{ github.workspace }}
        workdir: ${{ github.workspace }}/${{ inputs.source-dir }}
        shell: bash
        run: |
          echo "::group::Update builder instance"
          set -eu

          echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/90aptyes
          apt update
          apt dist-upgrade
          echo "::endgroup::"

          echo "::group::Install build dependencies"
          apt build-dep .
          if [ -n "${{ inputs.extra-source-build-deps }}" ]; then
            # Install extra packages for build-deps, to allow downloading vendored sources
            deps=(${{ inputs.extra-source-build-deps }})
            apt install ${deps[@]}
          fi
          echo "::endgroup::"

          GITHUB_TOKEN="${{ inputs.token }}"
          if [ -n "${GITHUB_TOKEN}" ]; then
            git config --system url."https://api:${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"
          fi

          echo "::group::Build debian source package"
          dpkg-buildpackage -D -S --sanitize-env
          echo "::endgroup::"

          mv -v ../"${{ env.PKG_NAME }}_"* "${{ env.SOURCE_OUTPUT_DIR }}"

    - name: Uploading source packages
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PKG_NAME }}_${{ env.PKG_VERSION }}-debian-source
        path: ${{ env.SOURCE_OUTPUT_DIR }}/
        if-no-files-found: error

    - name: Set up package build
      shell: bash
      run: |
        set -eu

        echo "::group::Create build input directory"
        # Appending /source because 'dpkg-source --extract' needs the output directory to be non-existent
        BUILD_INPUT_BASEDIR="$( mktemp --directory --tmpdir="${PWD}" )"
        echo BUILD_INPUT_BASEDIR="${BUILD_INPUT_BASEDIR}" >> $GITHUB_ENV
        BUILD_INPUT_DIR="${BUILD_INPUT_BASEDIR}/source"
        echo BUILD_INPUT_DIR="${BUILD_INPUT_DIR}" >> $GITHUB_ENV
        echo "::endgroup::"
        
        echo "::group::Create build output directory"
        echo BUILD_OUTPUT_DIR="$( mktemp --directory --tmpdir="${PWD}" )" >> $GITHUB_ENV
        echo "::endgroup::"

        echo "::group::Extract source package"
        cd ${{ env.SOURCE_OUTPUT_DIR }}
        dpkg-source --extract ${{ env.PKG_NAME }}_${{ env.PKG_VERSION }}.dsc "${BUILD_INPUT_DIR}"
        echo "::endgroup::"

    - name: Build packages
      uses: kohlerdominik/docker-run-action@v1.2.0
      with:
        image: ${{ inputs.docker-image }}
        environment: |
          DEBIAN_FRONTEND=noninteractive
        workdir: ${{ env.BUILD_INPUT_DIR }}
        volumes: |
          ${{ env.BUILD_INPUT_BASEDIR }}:${{ env.BUILD_INPUT_BASEDIR }}
          ${{ env.BUILD_OUTPUT_DIR }}:${{ env.BUILD_OUTPUT_DIR }}
        shell: bash
        run: |
          echo "::group::Update builder instance"
          set -eu

          echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/90aptyes
          apt update
          apt dist-upgrade
          echo "::endgroup::"

          echo "::group::Install build dependencies"
          apt build-dep .
          echo "::endgroup::"

          echo "::group::Build debian packages"
          dpkg-buildpackage -D -b --sanitize-env
          echo "::endgroup::"

          mv -v ../*"_${{ env.PKG_VERSION }}_"*.deb "${{ env.BUILD_OUTPUT_DIR }}"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PKG_NAME }}_${{ env.PKG_VERSION }}-debian-packages
        path: ${{ env.BUILD_OUTPUT_DIR }}/
        if-no-files-found: error
