name: Build debian package
description: Builds a debian package and uploads the artifact

inputs:
  source-dir:
    required: false
    description: Directory where the source is located
  docker-image:
    required: false
    default: ubuntu:rolling
    description: The docker image used to build the package
  token:
    required: false
    description: If provided, used for git authentication in the source build
  extra-source-build-deps:
    description: A list of extra build dependencies required during source build.
    required: false
    # FIXME: this should default to '', but we don't want to break job depending on us for now
    default: 'ca-certificates git'
  lintian:
    required: false
    description: Arguments to pass to lintian, if any. Set to `skip` to skip the lintian check.
    default: ''


# The process:
# 1. We build the source package in a docker container. If ca-certificates are
#    installed via extra-source-build-deps we can have a useful internet connection.
# 2. We the extract the source package.
# 3. We build the .deb from the source package, in a container without internet
#    kind of internet connection.
#
# To help with debugging, here are the processes and the directories they takes place in:
#
#  ${{ github.workspace }}
#     ├── a/b/c/${{ inputs.source-dir }}
#     │                 |
#     │           Build source pkg
#     │                 ↓
#     ├── ${{ env.SOURCE_OUTPUT_DIR }}
#     │                 |
#     │          Extract source pkg
#     │                 ↓
#     ├── ${{ env.BUILD_INPUT_DIR }}
#     │                 |
#     │          Build debian pkg
#     │                 ↓
#     └── ${{ env.BUILD_OUTPUT_DIR }}

runs:
  using: "composite"
  steps:
    - name: Set up source package build
      shell: bash
      run: |
        echo "::group::Create local version with commit and docker container"
        set -eu

        cd '${{ inputs.source-dir }}'

        # Short commit to avoid "package-has-long-file-name"
        echo VERSION_REF=$(date +'%y%m%d')+${{ github.run_number }}+$(echo ${{ github.sha }} | cut -c1-8) >> $GITHUB_ENV

        echo DEBFULLNAME="GitHub actions runner" >> $GITHUB_ENV
        echo DEBEMAIL="noreply@github.com" >> $GITHUB_ENV

        if git status --porcelain &>/dev/null; then
          echo DEBFULLNAME="$(git log -1 --format='%an' HEAD) - GH Action" >> $GITHUB_ENV
          echo DEBEMAIL="$(git log -1 --format='%ae' HEAD)" >> $GITHUB_ENV
        fi
        echo "::endgroup::"

    - name: Prepare source package
      uses: kohlerdominik/docker-run-action@v2.0.0
      with:
        image: ${{ inputs.docker-image }}
        environment: |
          DEBIAN_FRONTEND=noninteractive
          DEBFULLNAME=${{ env.DEBFULLNAME }}
          DEBEMAIL=${{ env.DEBEMAIL }}
        volumes: ${{ github.workspace }}:${{ github.workspace }}
        workdir: ${{ github.workspace }}/${{ inputs.source-dir }}
        shell: bash
        run: |
          echo "::group::Update builder instance and install dependencies"
          set -eu

          echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/90aptyes
          apt update
          apt install devscripts lsb-release
          echo "::endgroup::"

          echo "::group::Update debian package changelog"
          dch --local "+git${{ env.VERSION_REF }}~$(lsb_release -r -s)." \
            "Github build. Run id: ${{ github.run_id }}. Run number: ${{ github.run_number }}." \
            --distribution "$(lsb_release -c -s)"

          dpkg-parsechangelog
          echo "::endgroup::"

          echo "::group::Parsing name and version"
          echo PKG_NAME="$( dpkg-parsechangelog --show-field source )" >> $GITHUB_ENV
          echo PKG_VERSION="$( dpkg-parsechangelog --show-field version )" >> $GITHUB_ENV
          echo "::endgroup::"

    - name: Parse package source info
      shell: bash
      run: |
        echo "::group::Prepare source build"
        set -eu

        echo SOURCE_OUTPUT_DIR="$( mktemp --directory --tmpdir="${PWD}" )" >> $GITHUB_ENV
        echo ACTION_BIN_PATH="$( mktemp --directory --tmpdir="${PWD}" )" >> $GITHUB_ENV
        echo "::endgroup::"

    - name: Build source package
      uses: kohlerdominik/docker-run-action@v2.0.0
      with:
        image: ${{ inputs.docker-image }}
        environment: |
          DEBIAN_FRONTEND=noninteractive
        volumes: ${{ github.workspace }}:${{ github.workspace }}
        workdir: ${{ github.workspace }}/${{ inputs.source-dir }}
        shell: bash
        run: |
          echo "::group::Update builder instance"
          set -eu

          echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/90aptyes
          apt update
          apt dist-upgrade
          echo "::endgroup::"

          echo "::group::Install build dependencies"
          apt build-dep .
          if [ -n "${{ inputs.extra-source-build-deps }}" ]; then
            # Install extra packages for build-deps, to allow downloading vendored sources
            deps=(${{ inputs.extra-source-build-deps }})
            apt install ${deps[@]}
          fi
          echo "::endgroup::"

          if command -v git &> /dev/null; then
            git config --system --add safe.directory "${{ github.workspace }}"
          fi

          GITHUB_TOKEN="${{ inputs.token }}"
          if [ -n "${GITHUB_TOKEN}" ]; then
            git config --system url."https://api:${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"
          fi

          echo "::group::Build debian source package"
          dpkg-buildpackage -D -S --sanitize-env
          echo "::endgroup::"

          mv -v ../"${{ env.PKG_NAME }}_"* "${{ env.SOURCE_OUTPUT_DIR }}"

    - name: Uploading source packages
      uses: actions/upload-artifact@v4
      id: build-debian-source-package-upload-step
      with:
        name: ${{ env.PKG_NAME }}_${{ env.PKG_VERSION }}-debian-source
        path: ${{ env.SOURCE_OUTPUT_DIR }}/
        if-no-files-found: error

    - name: Install lintian result parser
      if: inputs.lintian != 'skip'
      shell: bash
      run: |
        echo "::group::Install lintian result parser"
        set -eu

        cp "${GITHUB_ACTION_PATH}/lintian-to-md.sh" \
          "${{ env.ACTION_BIN_PATH }}"/lintian-to-md
        chmod +x "${{ env.ACTION_BIN_PATH }}"/lintian-to-md
        echo "::endgroup::"

    - name: Run lintian on sources
      # We do this in a different step for various reasons:
      # 1. To still be able to upload the source for manual inspection without
      #    adding extra complexity to the action logic.
      # 2. To ensure that we don't install extra dependencies during sources
      #    building phase or during lintian phase.
      if: inputs.lintian != 'skip'
      uses: kohlerdominik/docker-run-action@v2.0.0
      with:
        image: ${{ inputs.docker-image }}
        environment:
          TERM=dumb
          DEBIAN_FRONTEND=noninteractive
          SOURCE_OUTPUT_DIR=${{ env.SOURCE_OUTPUT_DIR }}
        volumes: |
          ${{ env.SOURCE_OUTPUT_DIR }}:${{ env.SOURCE_OUTPUT_DIR }}
          ${{ env.ACTION_BIN_PATH }}:${{ env.ACTION_BIN_PATH }}
        workdir: ${{ env.SOURCE_OUTPUT_DIR }}
        shell: bash
        run: |
          echo "::group::Update tester instance"
          set -eu

          echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/90aptyes
          apt update
          apt dist-upgrade
          echo "::endgroup::"

          echo "::group::Install lintian"
          apt install adduser lintian
          echo "::endgroup::"

          echo "::group::Create test user"
          adduser --disabled-password --gecos "" tester
          chown tester:tester . -R
          echo "::endgroup::"

          echo "::group::Run lintian on source package"
          out_file=$(mktemp)
          runuser -u tester -- \
            lintian --pedantic --fail-on error ${{ inputs.lintian }} -- \
              "${{ env.PKG_NAME }}_${{ env.PKG_VERSION }}_source".changes \
            | tee "${out_file}"
          cat "${out_file}" | "${{ env.ACTION_BIN_PATH }}"/lintian-to-md \
            >> $GITHUB_STEP_SUMMARY
          echo "::endgroup::"

    - name: Set up package build
      shell: bash
      run: |
        echo "::group::Create build input directory"
        set -eu

        # Appending /source because 'dpkg-source --extract' needs the output directory to be non-existent
        BUILD_INPUT_BASEDIR="$( mktemp --directory --tmpdir="${PWD}" )"
        echo BUILD_INPUT_BASEDIR="${BUILD_INPUT_BASEDIR}" >> $GITHUB_ENV
        BUILD_INPUT_DIR="${BUILD_INPUT_BASEDIR}/source"
        echo BUILD_INPUT_DIR="${BUILD_INPUT_DIR}" >> $GITHUB_ENV
        echo "::endgroup::"

        echo "::group::Create build output directory"
        echo BUILD_OUTPUT_DIR="$( mktemp --directory --tmpdir="${PWD}" )" >> $GITHUB_ENV
        echo "::endgroup::"

        echo "::group::Extract source package"
        cd ${{ env.SOURCE_OUTPUT_DIR }}
        dpkg-source --extract ${{ env.PKG_NAME }}_${{ env.PKG_VERSION }}.dsc "${BUILD_INPUT_DIR}"
        echo "::endgroup::"

    - name: Build packages
      uses: kohlerdominik/docker-run-action@v2.0.0
      with:
        image: ${{ inputs.docker-image }}
        options: --cap-add=NET_ADMIN
        environment: |
          DEBIAN_FRONTEND=noninteractive
        workdir: ${{ env.BUILD_INPUT_DIR }}
        volumes: |
          ${{ env.BUILD_INPUT_BASEDIR }}:${{ env.BUILD_INPUT_BASEDIR }}
          ${{ env.BUILD_OUTPUT_DIR }}:${{ env.BUILD_OUTPUT_DIR }}
        shell: bash
        run: |
          echo "::group::Update builder instance"
          set -eu

          echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/90aptyes
          apt update
          apt dist-upgrade
          echo "::endgroup::"

          echo "::group::Create build user"
          apt install adduser
          apt-mark auto adduser
          adduser --disabled-password --gecos "" builder
          chown builder:builder .. -R
          echo "::endgroup::"

          echo "::group::Fully disable internet access for user"
          apt install iptables
          apt-mark auto iptables
          iptables -A OUTPUT -m owner --uid-owner $(id -u builder) -d 127.0.0.1 -j ACCEPT
          iptables -A OUTPUT -m owner --uid-owner $(id -u builder) -j DROP
          echo "::endgroup::"

          echo "::group::Cleanup unneeded packages"
          apt autoremove
          echo "::endgroup::"

          echo "::group::Install fakeroot"
          apt install fakeroot
          echo "::endgroup::"

          echo "::group::Install build dependencies"
          apt build-dep .
          echo "::endgroup::"

          echo "::group::Build debian packages"
          runuser -u builder -- dpkg-buildpackage -D -b --sanitize-env
          echo "::endgroup::"

          mv -v ../*"_${{ env.PKG_VERSION }}_"*.deb "${{ env.BUILD_OUTPUT_DIR }}"

          echo "::group::Show binaries information"
          for i in "${{ env.BUILD_OUTPUT_DIR }}"/*.deb; do
            {
              pkg_name=$(basename "$i")
              echo '## Package `'"${pkg_name}"'`'
              echo
              echo '```'
              echo "❯ dpkg --info $pkg_name"
              dpkg --info "$i" 2>&1
              echo '```'
              echo
              echo "<details>"
              echo "<summary>Package contents</summary>"
              echo
              echo '```'
              echo "❯ dpkg --contents $pkg_name" 2>&1
              dpkg --contents "$i"
              echo '```'
              echo "<details>"
            } | tee -a "${GITHUB_STEP_SUMMARY}"
          done
          echo "::endgroup::"

    - name: Upload artifacts
      id: build-debian-binary-packages-upload-step
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PKG_NAME }}_${{ env.PKG_VERSION }}-debian-packages
        path: ${{ env.BUILD_OUTPUT_DIR }}/
        if-no-files-found: error

    - name: Run lintian on binaries
      if: inputs.lintian != 'skip'
      uses: kohlerdominik/docker-run-action@v2.0.0
      with:
        image: ${{ inputs.docker-image }}
        environment:
          TERM=dumb
          DEBIAN_FRONTEND=noninteractive
        volumes: |
          ${{ env.BUILD_OUTPUT_DIR }}:${{ env.BUILD_OUTPUT_DIR }}
          ${{ env.ACTION_BIN_PATH }}:${{ env.ACTION_BIN_PATH }}
        workdir: ${{ env.BUILD_OUTPUT_DIR }}
        shell: bash
        run: |
          echo "::group::Update builder instance"
          set -eu

          echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/90aptyes
          apt update
          apt dist-upgrade
          echo "::endgroup::"

          echo "::group::Install lintian"
          apt install adduser lintian
          echo "::endgroup::"

          echo "::group::Create test user"
          adduser --disabled-password --gecos "" tester
          chown tester:tester . -R
          echo "::endgroup::"

          echo "::group::Run lintian on binaries"
          out_file=$(mktemp)
          runuser -u tester -- \
            lintian --pedantic --fail-on error ${{ inputs.lintian }} -- \
              *_"${{ env.PKG_VERSION }}"_*.deb \
            | tee "${out_file}"
          cat "${out_file}" | "${{ env.ACTION_BIN_PATH }}"/lintian-to-md \
            >> $GITHUB_STEP_SUMMARY
          echo "::endgroup::"
