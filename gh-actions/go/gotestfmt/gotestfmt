#!/bin/bash

set -euo pipefail

usage(){
    cat <<EOF
Usage: $0 [--logfile <logfile>] [-h|--help]

This script is a wrapper around gotestfmt. It expects the output of 'go test -json'
on stdin. The output of failed tests is written to stdout, while the full output
(including successful tests) is written to a logfile.

The gotestfmt binary is expected to be in GOPATH/bin, or in HOME/go/bin if GOPATH
is not set. If your gotestfmt binary is located elsewhere, you can set the GOTESTFMT
environment variable to the correct path.

Options:
  --logfile <logfile>  Logfile to write the full output to. Defaults to a temporary file.
  -h, --help           Show this help message and exit.
EOF
}

# Parse options
while [[ $# -gt 0 ]]; do
    case "$1" in
        --logfile)
            LOGFILE="$2"
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

LOGFILE=${LOGFILE:-$(mktemp -t gotestfmt.XXXXXX.log)}
echo >&2 "gotestfmt: Logging to ${LOGFILE}"
STDERR_FILE=${LOGFILE%.log}.stderr
STDOUT_FILE=${LOGFILE%.log}.stdout
GOTESTFMT=${GOTESTFMT:-${GOPATH:-$HOME/go}/bin/gotestfmt}

# Store the cleaned stdout in a temporary file distinct from the logfile, so
# that even if the logfile is stored in a directory that is uploaded as an
# artifact, the cleaned stdout is not uploaded.
CLEANED_STDOUT_FILE=$(mktemp -t gotestfmt.XXXXXX.cleaned.stdout)

strip_go_downloading_lines() {
    # Strip "go: downloading" lines which would cause jq (used by
    # `strip_empty_coverage_lines`) to fail.
    grep -v '^go: downloading'
}

strip_empty_coverage_lines() {
    # This strips empty coverage lines from the output of `go test -cover -json`,
    # which would otherwise be printed as error messages by gotestfmt.
    jq -c 'select(.Output != null and (.Output | contains("coverage: 0.0%") | not))'
}

copy_to_logfile() {
    # This copies the output of `go test -json` to the logfile, and
    # * uses gotestfmt to format the output
    # * unsets $GITHUB_WORKFLOW, so that gotestfmt doesn't print the
    #   `::group::` and `::endgroup::` GitHub Action workflow commands
    # * removes ANSI color codes, to make the logfile more readable
    tee >(GITHUB_WORKFLOW='' "${GOTESTFMT}" -showteststatus | sed 's/\x1b\[[0-9;]*m//g' > "${LOGFILE}")
}

copy_output() {
    # Copy all output of `go test -json` unformatted to a file, for debugging purposes.
    # This is useful if a jq format error occurs, to see the output that caused it.
    tee "${STDOUT_FILE}"
}

# Write stderr to a file which can be uploaded as an artifact
copy_output | \
    strip_go_downloading_lines | \
    strip_empty_coverage_lines | \
    tee "${CLEANED_STDOUT_FILE}" | \
    copy_to_logfile | \
    "${GOTESTFMT}" --hide all <&0 2> "${STDERR_FILE}" || exitcode=$?

# Print the stderr file to stderr
cat >&2 "${STDERR_FILE}"

# If the exitcode is 0 (i.e. no tests failed), print the successful tests
# (i.e. run gotestfmt without the --hide flag).
if [ "${exitcode:-0}" -eq 0 ]; then
    "${GOTESTFMT}" < "${CLEANED_STDOUT_FILE}"
fi

exit "${exitcode:-0}"
