name: Run go generate and report changes
description: Run go generate from the current directory and report any changes. It supposes go is already installed.

inputs:
  working-directory:
    description: Directory were to run the action. All other paths are relative to this one.
    default: '.'
  tools-directory:
    description: Directory pointing to go.mod file for checking tool versionning. If none is provided, it will download latest.
  paths-to-ignore:
    description: Files and paths to ignore when checking if generated files changed. This is passed to git update-index.
    default: po/* doc/*.md README.md
  generate-diff-regexp-to-ignore:
    description: Files and paths to ignore when checking if generated files changed. This is passed to diff -I.
    default: "^//.*protoc.*v"
  fail-on-diff:
    description: Fail the job on any detected diff.
    default: "true"
  token:
    description: A token to authenticate GH API calls with. It will be used to get the latest protoc release, for example. Make sure to limit the permissions, e.g. a zero-permissions token is acceptable.
    default: ""
outputs:
  diff:
    description: Returns if there is a local diff.
    value: ${{ steps.go-generate-check.outputs.diff }}

runs:
  using: "composite"
  steps:
    - name: Install tools and dependencies
      id: proto-deps
      working-directory: ${{ inputs.tools-directory }}
      env:
        # The tools directory is not supposed to be a workspace module.
        # In case the project uses go workspaces, we need to tell Go to ignore it,
        # otherwise the go install command fails with "no required module provides package ...".
        GOWORK: off
      run: |
        echo "::group::Install tools and dependencies"
        set -eu

        tools=$(grep -o '_ ".*"' *.go | cut -d '"' -f 2)

        needsProtoc=false
        for tool in ${tools}; do
          if [[ "${tool}" == *protoc* ]]; then
            echo "needs-protoc=true" >> $GITHUB_OUTPUT
          fi
          go install ${tool}
        done

        echo "::endgroup::"
      shell: bash
    - name: Check token permissions
      if: ${{ inputs.token != '' }}
      uses: canonical/desktop-engineering/gh-actions/common/gh-perms@main
      with:
        token: ${{ inputs.token }}
    - name: Install latest protoc
      if: ${{ steps.proto-deps.outputs.needs-protoc == 'true' }}
      shell: bash
      run: |
        # Install latest protoc
        echo "::group::Install latest protoc"
        set -eu

        # Use the GitHub token if one was provided, to avoid rate limiting.
        AUTH_HEADER=()
        if [ -n "${{ inputs.token }}" ]; then
          AUTH_HEADER=(-H "Authorization: Bearer ${{ inputs.token }}")
        fi

        # Get the version of the latest protoc release.
        PROTOC_HEADERS=$(mktemp)
        PROTOC_JSON=$(curl -s -D "$PROTOC_HEADERS" "${AUTH_HEADER[@]}" \
        https://api.github.com/repos/protocolbuffers/protobuf/releases/latest)

        PROTOC_VERSION=$(echo "$PROTOC_JSON" | jq -r '.tag_name // empty' | sed 's/^v//')

        if [ -z "$PROTOC_VERSION" ]; then
          echo "Failed to get latest protobuf release from GitHub:"
          echo "$PROTOC_JSON"

          RATE_REMAINING=$(grep -i '^x-ratelimit-remaining:' "$PROTOC_HEADERS" | awk '{print $2}' | tr -d '\r')
          echo "Rate limit remaining: $RATE_REMAINING"
          if [ "$RATE_REMAINING" -eq 0 ] && [ -z "${{ inputs.token }}" ]; then
            echo "::warning file=action.yaml,line=82::GitHub API rate limit may have been hit. Consider providing GITHUB_TOKEN via the token input."
          fi

          exit 1
        fi

        # Download and install the latest protoc release.
        curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-linux-x86_64.zip
        unzip -o protoc-${PROTOC_VERSION}-linux-x86_64.zip -d $HOME/.local
        rm protoc-${PROTOC_VERSION}-linux-x86_64.zip

        # Add protoc to the PATH.
        echo "$HOME/.local/bin" >> $GITHUB_PATH

        echo "::endgroup::"

    - name: Regenerate files with go generate
      id: go-generate-run
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo Regenerate files with go generate
        set -eu

        go generate ./...
      shell: bash
    - name: Ensure there is no diff between current and generated files
      if: ${{ always() && steps.go-generate-run.outcome == 'success' }}
      id: go-generate-check
      # https://github.com/orgs/community/discussions/25246
      uses: canonical/desktop-engineering/gh-actions/common/has-diff@main
      with:
        working-directory: ${{ inputs.working-directory }}
        paths-to-ignore: ${{ inputs.paths-to-ignore }}
        regexp-to-ignore: ${{ inputs.generate-diff-regexp-to-ignore }}
        fail-on-diff: ${{ inputs.fail-on-diff }}
